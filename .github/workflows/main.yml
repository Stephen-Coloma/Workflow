# The main goal of this workflow is to build, test and deploy the source code to an AWS EC2 instance.
name: Build, Test and Deploy the Application

on: 
  push:
    branches: 
      - main
  pull_request:
    branches:
      - main

jobs:
  build: # This job builds the project to a dist folder
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node Server
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm' 

      - name: Install Dependencies
        run: npm install

      - name: Build Source Code
        run: npm run build

      - name: Check Distribution Files
        run: ls -l ./dist

      - name: Upload Dist Folder to Artifacts
        uses: actions/upload-artifact@v4 # key is to read its documentation
        with:
          name: dist
          path: dist/
          if-no-files-found: error
          overwrite: true
          retention-days: 1

  test: # This job tests the source code in the dist folder from artifacts
    needs: build # ensures build runs first before test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node Server
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Download Dist Folder from Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/ # destination of zipped dist from upload must be downloaded in this folder
          
      - name: Verify Dist Folder Contents
        run: ls -l ./dist

      - name: Run Tests in the Dist Folder
        run: npm run test

  deploy: # This job deploys the source code to an AWS EC2 instance.
    needs: [build, test]
    runs-on: ubuntu-latest

    steps:   
    - name: Checkout the Repository
      uses: actions/checkout@v4

    - name: Install SSH Key # This makes -i not required in scp and ssh commands
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
    - name: Login to Dockerhub
      uses: docker/login-action@v3
      with: 
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # This is inside the github actions runner
    - name: Export Environment Variables, Compose Images and Push to Dockerhub
      run: |
        export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
        export MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
        export MYSQL_USER=${{ secrets.MYSQL_USER }}
        export MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
        export MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
        docker compose build
        docker compose push

    - name: Copy deploy-compose.yaml file to EC2 Instance
      run: scp -o StrictHostKeyChecking=no deploy-compose.yaml ${{ secrets.EC2_USER }}@${{ secrets.EC2_INSTANCE_IP }}:/home/ubuntu/

    # This is inside EC2
    - name: Pull Images from Dockerhub, Run Containers
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_INSTANCE_IP }} << 'EOF'
        export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
        export SERVER_HOST=${{ secrets.SERVER_HOST }}
        export SERVER_PORT=${{ secrets.SERVER_PORT }}
        export MYSQL_HOST=${{ secrets.MYSQL_HOST }}
        export MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
        export MYSQL_USER=${{ secrets.MYSQL_USER }}
        export MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
        export MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
        
        echo "DOCKERHUB_USERNAME: $DOCKERHUB_USERNAME"
        echo "SERVER_HOST: $SERVER_HOST"
        echo "SERVER_PORT: $SERVER_PORT"
        echo "MYSQL_HOST: $MYSQL_HOST"
        echo "MYSQL_DATABASE: $MYSQL_DATABASE"
        echo "MYSQL_USER: $MYSQL_USER"
        echo "MYSQL_PASSWORD: $MYSQL_PASSWORD"
        echo "MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD"

        docker stop $(docker ps -a -q) || true
        docker rm $(docker ps -a -q) || true
        docker rmi $(docker images) || true
        echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        docker compose -f /home/ubuntu/deploy-compose.yaml pull
        docker compose -f /home/ubuntu/deploy-compose.yaml up -d
        EOF
